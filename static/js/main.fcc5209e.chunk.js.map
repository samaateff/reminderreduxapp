{"version":3,"sources":["Components/reminders.png","types.js","Components/App.js","actions/index.js","reducers/index.js","index.js"],"names":["ADD_REMINDER","REMOVE_REMINDER","CLEAR_REMINDER","App","state","text","date","Date","render_Reminders","reminders","props","className","map","reminder","moment","fromNow","onClick","remove_Reminder","id","src","logo","type","value","this","placeholder","onChange","e","setState","target","placeholderText","selected","showTimeSelect","timeFormat","dateFormat","timeCaption","add_Reminder","clear_Reminder","Component","connect","action","console","log","read_cookie","Math","random","bake_cookie","filter","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"wOAAe,G,MAAA,IAA0B,uCCA5BA,EAAe,eACfC,EAAkB,kBAClBC,EAAiB,iB,OCKxBC,E,4MACFC,MAAQ,CACJC,KAAM,GACNC,KAAM,IAAIC,M,EAGdC,iBAAmB,WACf,IAAOC,EAAa,EAAKC,MAAlBD,UACP,OACC,oBAAIE,UAAW,aAAf,SAEQF,EAAUG,KAAI,SAAAC,GACV,OACI,qBAAsBF,UAAU,kBAAhC,UACI,8BAAME,EAASR,OACf,8BAAMS,IAAO,IAAIP,KAAKM,EAASP,OAAOS,YACtC,qBAAKJ,UAAU,2BAA2BK,QAAS,kBAAK,EAAKN,MAAMO,gBAAgBJ,EAASK,KAA5F,iBAHKL,EAASK,U,4CAWvC,WAAU,IAAD,OACL,OACI,sBAAKP,UAAU,MAAf,UACG,qBAAKQ,IAAKC,IACV,qBAAKT,UAAU,gBAAf,SACI,sDAEJ,uBACAA,UAAU,eACVU,KAAK,OACLC,MAAOC,KAAKnB,MAAMC,KAClBmB,YAAY,qBACZC,SAAU,SAACC,GAAD,OAAM,EAAKC,SAAS,CAACtB,KAAMqB,EAAEE,OAAON,WAG9C,cAAC,IAAD,CACAX,UAAU,eACVW,MAAOC,KAAKnB,MAAME,KAClBuB,gBAAgB,aAChBC,SAAUP,KAAKnB,MAAME,KAClBmB,SAAU,SAACnB,GAAQ,EAAKqB,SAAS,CAACrB,UAClCyB,gBAAc,EACdC,WAAW,QACXC,WAAW,uBACXC,YAAY,SAEf,wBACElB,QAAS,WACV,EAAKN,MAAMyB,aAAa,EAAK/B,MAAMC,KAAK,EAAKD,MAAME,MACnD,EAAKqB,SAAS,CAACtB,KAAK,GAAIC,KAAM,MAE7BK,UAAU,mCALZ,0BASCY,KAAKf,mBACN,wBACCQ,QAAS,kBAAK,EAAKN,MAAM0B,kBACzBzB,UAAU,kCAFX,oC,GA5DG0B,aAmFHC,eAAQ,SAAAlC,GACnB,MAAM,CACFK,UAAWL,KAEjB,CACE+B,aC7FwB,SAAC9B,EAAKC,GAC9B,IAAMiC,EAAS,CACXlB,KAAMrB,EACNK,OACAC,QAGJ,OADAkC,QAAQC,IAAI,MAAOF,GACZA,GDuFPtB,gBCpF2B,SAACC,GAC5B,IAAMqB,EAAS,CACXlB,KAAMpB,EACNiB,MAGJ,OADAsB,QAAQC,IAAI,SAAUF,GACfA,GD+EPH,eC5E0B,WAI1B,MAHe,CACXf,KAAMnB,KDmECoC,CAQXnC,G,wBElEWM,EA9BG,WAAuB,IAAtBL,EAAqB,uDAAf,GAAImC,EAAW,uCAC5B9B,EAAY,KAKhB,OAHAL,EAAQsC,sBAAY,aAGjBH,EAAOlB,OAASrB,GACfS,EAAS,sBAAOL,GAAP,CAAe,CAACC,KAAKkC,EAAOlC,KAAOC,KAAKiC,EAAOjC,KAAMY,GAAGyB,KAAKC,YACtEC,sBAAY,YAAapC,GACzB+B,QAAQC,IAAI,eAAehC,GACpBA,GAEF8B,EAAOlB,OAASpB,GACrBQ,EAAYL,EAAM0C,QAAO,SAAAjC,GAAQ,OAAIA,EAASK,KAAOqB,EAAOrB,MAC5D2B,sBAAY,YAAapC,GACzB+B,QAAQC,IAAI,eAAgBhC,GACrBA,GAEF8B,EAAOlB,OAASnB,GACrBO,EAAY,GACZoC,sBAAY,YAAapC,GACzB+B,QAAQC,IAAI,eAAgBhC,GACrBA,GAGAL,GCdb2C,G,cAAQC,YAAYvC,IAE1BwC,IAASC,OACL,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACA,cAAC,EAAD,MAEAI,SAASC,eAAe,W","file":"static/js/main.fcc5209e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/reminders.ec88bfd0.png\";","export const ADD_REMINDER = 'ADD_REMINDER'\nexport const REMOVE_REMINDER = 'REMOVE_REMINDER'\nexport const CLEAR_REMINDER = 'CLEAR_REMINDER'","import React , {Component} from \"react\";\nimport {connect} from 'react-redux'\nimport moment from 'moment'\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport logo from './reminders.png';\nimport {add_Reminder , clear_Reminder, remove_Reminder} from '../actions'\nclass App extends Component {\n    state = {\n        text: '',\n        date: new Date()\n    }\n\n    render_Reminders = () => {\n        const {reminders} = this.props;\n        return(\n         <ul className =\"list-group\">\n             {\n                 reminders.map(reminder=>{\n                     return(\n                         <li key={reminder.id} className='list-group-item'>\n                             <div>{reminder.text}</div>\n                             <div>{moment(new Date(reminder.date)).fromNow()}</div>\n                             <div className=\"closeIcon btn btn-danger\" onClick={()=> this.props.remove_Reminder(reminder.id)}>x</div>\n                         </li>\n                     )\n                 })\n             }\n         </ul>\n        )\n    }\n    render() {\n        return (\n            <div className=\"App\">\n               <img src={logo}/>\n               <div className=\"reminderTitle\">\n                   <h2>what should u do ?</h2>\n               </div>\n               <input\n               className=\"form-control\"\n               type=\"text\"\n               value={this.state.text}\n               placeholder=\"enter what u think\"\n               onChange={(e)=> this.setState({text: e.target.value})}\n              />\n              \n               <DatePicker\n               className=\"form-control\"\n               value={this.state.date}\n               placeholderText=\"Enter date\"\n               selected={this.state.date}\n                  onChange={(date)=>{this.setState({date})}}\n                  showTimeSelect\n                  timeFormat=\"HH:mm\"\n                  dateFormat=\"MMMM d, yyyy h:mm aa\"\n                  timeCaption=\"time\"\n               />\n               <button\n                 onClick={()=> {\n                this.props.add_Reminder(this.state.text,this.state.date)\n                this.setState({text:'', date: ''})\n                }}\n                 className=\"btn btn-primary btn-lg btn-block\"\n               >\n                   add reminder\n               </button>\n               {this.render_Reminders()}\n               <button\n                onClick={()=> this.props.clear_Reminder()}\n                className=\"btn btn-danger btn-lg btn-block\"\n               >\n                   clear reminders\n               </button>\n            </div>\n        )\n    }\n}\n\n/*function mapDispatchToProps(dispatch){\n    return{\n        add_Reminder : () => dispatch(add_Reminder())\n    }\n}*/\n\n/*function mapStateToProps(state){\n    return{\n        reminders : state\n    }\n}*/\n\nexport default connect(state => {\n    return{\n        reminders: state\n    }\n},{\n    add_Reminder,\n    remove_Reminder,\n    clear_Reminder\n}) (App);","import { ADD_REMINDER, REMOVE_REMINDER , CLEAR_REMINDER } from \"../types\";\n\nexport const add_Reminder = (text,date)=>{\n    const action = {\n        type: ADD_REMINDER,\n        text,\n        date\n    }\n    console.log(\"Add\", action)\n    return action\n}\n\nexport const remove_Reminder = (id) => {\n    const action = {\n        type: REMOVE_REMINDER,\n        id\n    }\n    console.log(\"Remove\", action)\n    return action\n}\n\nexport const clear_Reminder = () => {\n    const action = {\n        type: CLEAR_REMINDER\n    }\n    return action\n}","import { ADD_REMINDER, REMOVE_REMINDER, CLEAR_REMINDER } from \"../types\"\nimport {bake_cookie, read_cookie} from 'sfcookies'\nconst reminders = (state=[], action) => {\n        let reminders = null;\n\n        state = read_cookie('reminders')\n\n\n        if(action.type === ADD_REMINDER){\n            reminders = [...state , {text:action.text , date:action.date, id:Math.random()}]\n            bake_cookie('reminders', reminders)\n            console.log(\"from reducer\",reminders)\n            return reminders\n        }\n        else if (action.type === REMOVE_REMINDER) {\n            reminders = state.filter(reminder => reminder.id !== action.id)\n            bake_cookie('reminders', reminders)\n            console.log(\"from reducer\", reminders)\n            return reminders\n        }\n        else if (action.type === CLEAR_REMINDER) {\n            reminders = []\n            bake_cookie('reminders', reminders)\n            console.log(\"from reducer\", reminders)\n            return reminders\n        }\n        else{\n            return state\n        }\n    }\n\n\nexport default reminders","import React from 'react'\nimport ReactDOM  from 'react-dom'\nimport App from './Components/App'\nimport {createStore} from 'redux'\nimport {Provider} from 'react-redux'\n\nimport reminders from './reducers'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css'\n\n\n\nconst store = createStore(reminders)\n\nReactDOM.render(\n    <Provider store={store}>\n    <App/>\n    </Provider>,\n    document.getElementById('root')\n    )"],"sourceRoot":""}